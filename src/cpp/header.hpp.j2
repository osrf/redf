/* This file is generated by redf */

#pragma once

{% for msg in messages -%}
#include <{{ msg | snake }}.hpp>
{%- endfor %}
#include <rclcpp/qos.hpp>

#include <string>

namespace {{namespace}} {

{% for ep in redf.endpoints -%}
/**
 * {{ep.description}}
 */
class {{ep.title | pascal}} {
public:
  using MessageType = {{ ep.message_type | replace(from="/", to="::") }};

  static inline std::string topic_name() {
    static const std::string topic = "{{ep.topic}}";
    return topic;
  }

  static inline rclcpp::QoS qos() {
    {% if ep.qos is qos_default -%}
    static const rclcpp::QoS qos{10};
    {% elif ep.qos is qos_preset -%}
    {% if ep.qos == "clock" -%}
    static const rclcpp::QoS qos = rclcpp::ClockQoS{};
    {% elif ep.qos == "parameter_events" -%}
    static const rclcpp::QoS qos = rclcpp::ParameterEventsQoS{};
    {% elif ep.qos == "parameters" -%}
    static const rclcpp::QoS qos = rclcpp::ParametersQoS{};
    {% elif ep.qos == "rosout" -%}
    static const rclcpp::QoS qos = rclcpp::RosoutQoS{};
    {% elif ep.qos == "sensor_data" -%}
    static const rclcpp::QoS qos = rclcpp::SensorDataQoS{};
    {% elif ep.qos == "services" -%}
    static const rclcpp::QoS qos = rclcpp::ServicesQoS{};
    {% elif ep.qos == "system_defaults" -%}
    static const rclcpp::QoS qos = rclcpp::SystemDefaultsQoS{};
    {% endif -%}
    {% else -%}
    static const rclcpp::QoS qos = []() {
      rclcpp::QoS qos{10};
      {% if ep.qos.reliability -%}
      qos.reliability(rclcpp::ReliabilityPolicy::{{ ep.qos.reliability | pascal }});
      {% else -%}
      qos.reliability(rclcpp::ReliabilityPolicy::SystemDefault);
      {% endif -%}
      {% if ep.qos.durability -%}
      qos.durability(rclcpp::DurabilityPolicy::{{ ep.qos.durability | pascal }});
      {% else -%}
      qos.durability(rclcpp::DurabilityPolicy::SystemDefault);
      {% endif -%}
      {% if ep.qos.liveliness -%}
      qos.liveliness(rclcpp::LivelinessPolicy::{{ ep.qos.liveliness | pascal }});
      {% else -%}
      qos.liveliness(rclcpp::LivelinessPolicy::SystemDefault);
      {% endif -%}
      {% if ep.qos.deadline -%}
      qos.deadline(rclcpp::Duration{% raw %}{{% endraw %}{{ep.qos.deadline.secs}}, {{ep.qos.deadline.nanosecs}}{% raw %}}{% endraw %});
      {% endif -%}
      {% if ep.qos.lifespan -%}
      qos.lifespan(rclcpp::Duration{% raw %}{{% endraw %}{{ep.qos.deadline.secs}}, {{ep.qos.deadline.nanosecs}}{% raw %}}{% endraw %});
      {% endif -%}
      {% if ep.qos.lease_duration -%}
      qos.liveliness_lease_duration(rclcpp::Duration{% raw %}{{% endraw %}{{ep.qos.deadline.secs}}, {{ep.qos.deadline.nanosecs}}{% raw %}}{% endraw %});
      {% endif -%}
      qos.avoid_ros_namespace_conventions({{ep.qos.avoid_ros_namespace_conventions}});
      return qos;
    }();
    {% endif -%}
    return qos;
  }
};

{% endfor -%}
}
