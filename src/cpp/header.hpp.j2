/* This file is generated by redf */

{# ROS2 style uses header guards, but we are using pragma once to avoid having to generating non-conflicting defines -#}
#pragma once

{% for ros_type in ros_types -%}
#include <{{ ros_type | snake }}.hpp>
{% endfor %}
#include <rclcpp/qos.hpp>

#include <string>

namespace {{namespace}} {

{% for ep in redf.endpoints -%}
{% if ep.type == "topic" -%}
/**
 * {{ep.description}}
 */
class {{ep.title | pascal}} {
public:
  using MessageType = {{ ep.message_type | replace(from="/", to="::") }};

  static inline std::string topic_name() {
    static const std::string topic = "{{ep.topic}}";
    return topic;
  }

  static inline rclcpp::QoS qos(size_t history_depth = 10) {
    {%- if ep.qos is qos_default %}
    return rclcpp::QoS{history_depth};
    {%- elif ep.qos is qos_preset %}
    {%- if ep.qos == "clock" %}
    return rclcpp::ClockQoS{rclcpp::KeepLast{history_depth}};
    {%- elif ep.qos == "parameter_events" %}
    return rclcpp::ParameterEventsQoS{rclcpp::KeepLast{history_depth}};
    {%- elif ep.qos == "parameters" %}
    return rclcpp::ParametersQoS{rclcpp::KeepLast{history_depth}};
    {%- elif ep.qos == "rosout" %}
    return rclcpp::RosoutQoS{rclcpp::KeepLast{history_depth}};
    {%- elif ep.qos == "sensor_data" %}
    return rclcpp::SensorDataQoS{rclcpp::KeepLast{history_depth}};
    {%- elif ep.qos == "services" %}
    return rclcpp::ServicesQoS{rclcpp::KeepLast{history_depth}};
    {%- elif ep.qos == "system_defaults" %}
    return rclcpp::SystemDefaultsQoS{rclcpp::KeepLast{history_depth}};
    {%- endif %}
    {%- else %}
    rclcpp::QoS qos{history_depth};
    {%- if ep.qos.reliability %}
    qos.reliability(rclcpp::ReliabilityPolicy::{{ ep.qos.reliability | pascal }});
    {%- else %}
    qos.reliability(rclcpp::ReliabilityPolicy::SystemDefault);
    {%- endif %}
    {%- if ep.qos.durability %}
    qos.durability(rclcpp::DurabilityPolicy::{{ ep.qos.durability | pascal }});
    {%- else %}
    qos.durability(rclcpp::DurabilityPolicy::SystemDefault);
    {%- endif %}
    {%- if ep.qos.liveliness %}
    qos.liveliness(rclcpp::LivelinessPolicy::{{ ep.qos.liveliness | pascal }});
    {%- else %}
    qos.liveliness(rclcpp::LivelinessPolicy::SystemDefault);
    {%- endif %}
    {%- if ep.qos.deadline %}
    qos.deadline(rclcpp::Duration{% raw %}{{% endraw %}{{ep.qos.deadline.secs}}, {{ep.qos.deadline.nanosecs}}{% raw %}}{% endraw %});
    {%- endif %}
    {%- if ep.qos.lifespan %}
    qos.lifespan(rclcpp::Duration{% raw %}{{% endraw %}{{ep.qos.deadline.secs}}, {{ep.qos.deadline.nanosecs}}{% raw %}}{% endraw %});
    {%- endif %}
    {%- if ep.qos.lease_duration %}
    qos.liveliness_lease_duration(rclcpp::Duration{% raw %}{{% endraw %}{{ep.qos.deadline.secs}}, {{ep.qos.deadline.nanosecs}}{% raw %}}{% endraw %});
    {%- endif %}
    qos.avoid_ros_namespace_conventions({{ep.qos.avoid_ros_namespace_conventions}});
    return qos;
    {%- endif %}
  }
};

{% endif -%}
{% if ep.type == "service" -%}
class {{ep.title | pascal}} {
public:
  using ServiceType = {{ ep.service_type | replace(from="/", to="::") }};

  static inline std::string service_name() {
    static const std::string name = "{{ep.service_name}}";
    return name;
  }
};

{% endif -%}

{% if ep.type == "action" -%}
class {{ep.title | pascal}} {
public:
  using ActionType = {{ ep.action_type | replace(from="/", to="::") }};

  static inline std::string action_name() {
    static const std::string name = "{{ep.action_name}}";
    return name;
  }
};

{% endif -%}
{% endfor -%}
}
